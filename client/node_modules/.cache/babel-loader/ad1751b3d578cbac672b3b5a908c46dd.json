{"ast":null,"code":"var _jsxFileName = \"/Users/fabian/Documents/GitHub/PentaTech/Media-Tracker/client/src/components/ResultCard.js\";\nimport React from 'react';\nimport { Card, Button } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\n\nconst ResultCard = props => {\n  let id = -1;\n  let type = \"\";\n  let title = \"\";\n  let overview = \"\";\n  let releaseDate = \"\";\n  let posterPath = \"\";\n  if (props.id) id = props.id;\n  if (props.type) type = props.type;\n  if (props.title) title = props.title;\n  if (props.overview) overview = props.overview;\n  if (props.release_date) releaseDate = props.release_date;\n  if (props.poster) posterPath = props.poster;\n  const posterBaseURL = \"http://image.tmdb.org/t/p/w185_and_h278_bestv2/\";\n\n  const handleMediaPage = event => {\n    event.preventDefault();\n    fetch(\"/api/addToList?id=\" + id + \"&type=\" + type).then(res => {\n      if (res.status === 200) {\n        alert(\"Added to list!\");\n      } else if (res.status === 202) {\n        alert(\"Added to list\");\n      } else if (res.status === 500) {\n        alert(\"Error: Insufficient information for title. Available only as a search result.\");\n      } else {\n        const error = new Error(res.error);\n        throw error;\n      }\n    }).catch(err => {\n      console.error(err);\n      alert('Error navigating to title\\'s page. Please try again.');\n    });\n  };\n\n  return React.createElement(Card, {\n    style: cardStyle,\n    className: \"card text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Card.Header, {\n    style: cardHeaderStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    style: {\n      cursor: 'pointer'\n    },\n    onClick: handleMediaPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Card.Img, {\n    variant: \"top\",\n    style: cardImageStyle,\n    src: posterBaseURL + posterPath,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }))), React.createElement(Card.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Card.Title, {\n    style: cardTitleStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, title, \" (\", releaseDate.length > 4 ? releaseDate.substring(0, 4) : \"\", \")\"), React.createElement(Card.Text, {\n    style: cardTextStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, overview.length < 100 ? overview : overview.substring(0, 96) + \"...\")), React.createElement(Card.Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Button, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Add to list\"))));\n};\n\nconst cardStyle = {\n  backgroundColor: '#212121'\n};\nconst cardHeaderStyle = {\n  backgroundColor: 'whitesmoke'\n};\nconst cardImageStyle = {\n  width: '185px',\n  height: '278px'\n};\nconst cardTitleStyle = {\n  color: 'whitesmoke',\n  height: '65px'\n};\nconst cardTextStyle = {\n  color: 'lightgrey',\n  height: '40px'\n};\nexport default withRouter(ResultCard);","map":{"version":3,"sources":["/Users/fabian/Documents/GitHub/PentaTech/Media-Tracker/client/src/components/ResultCard.js"],"names":["React","Card","Button","withRouter","ResultCard","props","id","type","title","overview","releaseDate","posterPath","release_date","poster","posterBaseURL","handleMediaPage","event","preventDefault","fetch","then","res","status","alert","error","Error","catch","err","console","cardStyle","cardHeaderStyle","cursor","cardImageStyle","cardTitleStyle","length","substring","cardTextStyle","backgroundColor","width","height","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Card, Button } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\n\nconst ResultCard = props => {\n    let id = -1;\n    let type = \"\";\n    let title = \"\";\n    let overview = \"\";\n    let releaseDate = \"\";\n    let posterPath = \"\";\n    if (props.id)\n        id = props.id;\n    if (props.type)\n        type = props.type;\n    if (props.title)\n        title = props.title;\n    if (props.overview)\n        overview = props.overview;\n    if (props.release_date)\n        releaseDate = props.release_date;\n    if (props.poster)\n        posterPath = props.poster;\n    const posterBaseURL = \"http://image.tmdb.org/t/p/w185_and_h278_bestv2/\";\n\n    const handleMediaPage = (event) => {\n        event.preventDefault();\n        fetch(\"/api/addToList?id=\" + id + \"&type=\" + type)\n            .then(res => {\n                if (res.status === 200) {\n                    alert(\"Added to list!\");\n                } else if (res.status === 202) {\n                    alert(\"Added to list\");\n                } else if (res.status === 500) {\n                    alert(\"Error: Insufficient information for title. Available only as a search result.\")\n                } else {\n                    const error = new Error(res.error);\n                    throw error;\n                }\n            })\n            .catch(err => {\n                console.error(err);\n                alert('Error navigating to title\\'s page. Please try again.');\n            });\n    };\n\n    return (\n        <Card style={cardStyle} className=\"card text-center\">\n            <Card.Header style={cardHeaderStyle}>\n                <a style={{ cursor: 'pointer' }} onClick={handleMediaPage}>\n                    <Card.Img variant=\"top\" style={cardImageStyle} src={posterBaseURL + posterPath} />\n                </a>\n            </Card.Header>\n            <Card.Body>\n                <Card.Title style={cardTitleStyle}>{title} ({releaseDate.length > 4 ? releaseDate.substring(0, 4) : \"\"})</Card.Title>\n                <Card.Text style={cardTextStyle}>\n                    <i>{overview.length < 100 ? overview : overview.substring(0, 96) + \"...\"}</i>\n                </Card.Text>\n                <Card.Footer>\n                    <Button>Add to list</Button>\n                </Card.Footer>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst cardStyle = {\n    backgroundColor: '#212121'\n};\n\nconst cardHeaderStyle = {\n    backgroundColor: 'whitesmoke'\n};\n\nconst cardImageStyle = {\n    width: '185px',\n    height: '278px',\n};\n\nconst cardTitleStyle = {\n    color: 'whitesmoke',\n    height: '65px'\n};\n\nconst cardTextStyle = {\n    color: 'lightgrey',\n    height: '40px'\n};\n\nexport default withRouter(ResultCard);"]},"metadata":{},"sourceType":"module"}